Interactive Dialogs
===================

Interactive dialogs are used by applications that integrate with the Mattermost server. They are a method for integrations to receive form-styled input from users. Use them to gather structured information from the end user to perform an action or a request.

Integrations can open dialogs when users :doc:`click message buttons or select an option from a menu </integrations-guide/interactive-messages>`, or use a :doc:`custom slash command </integrations-guide/run-slash-commands>`. Plugins can also trigger a dialog based on user actions. For instance, if a plugin adds a button in the channel header, clicking that button may open a dialog.

Here is an example of what a dialog looks like for creating a Jira issue within the Mattermost user interface:

.. image:: ../images/interactive-dialog-example.png
   :alt: Example of an interactive dialog for creating a Jira issue.

Open a dialog
-------------

To open a dialog, your integration must first receive an HTTP request from the Mattermost server. This request will be triggered by a slash command or an interactive message and will include a ``trigger_id``.

Once you have the ``trigger_id``, you can use it to open the interactive dialog by sending an ``HTTP POST`` request to ``https://your-mattermost-url.com/api/v4/actions/dialogs/open``.

Parameters
----------

The body of the ``POST`` request to open a dialog requires a JSON object with a ``trigger_id``, a ``url`` for the submission, and a ``dialog`` object.

.. code-block:: json

    {
        "trigger_id": "<unique ID generated by the server>",
        "url": "<URL to send the submitted request to>",
        "dialog": {
            "callback_id": "<ID specified by the integration to identify the request>",
            "title": "<title of the dialog>",
            "introduction_text": "<Text describing the dialog box content>",
            "elements": ["<Array of UI elements to display in the dialog>"],
            "submit_label": "<label of the button to complete the dialog>",
            "notify_on_cancel": false,
            "state": "<string provided by the integration that will be echoed back with dialog submission>"
        }
    }

The following parameters are supported for the ``dialog`` object:

.. list-table::
   :widths: 20 15 65
   :header-rows: 1

   * - Parameter
     - Type
     - Description
   * - ``title``
     - String
     - Title of the dialog. Maximum 24 characters.
   * - ``introduction_text``
     - String
     - Markdown-formatted introduction text which is displayed above the dialog ``elements``.
   * - ``elements``
     - Array
     - An array of element objects. If none are supplied, the dialog box acts as a simple confirmation.
   * - ``url``
     - String
     - The URL to send the submitted dialog payload to.
   * - ``icon_url``
     - String
     - (Optional) The URL of the icon used for your dialog. If none is specified, no icon is displayed.
   * - ``submit_label``
     - String
     - (Optional) Label of the button to complete the dialog. Defaults to ``Submit``.
   * - ``notify_on_cancel``
     - Boolean
     - (Optional) When ``true``, sends an event back to the integration whenever there's a user-induced dialog cancellation. No other data is sent back with the event. Default is ``false``.
   * - ``state``
     - String
     - (Optional) String provided by the integration that will be echoed back with dialog submission. Defaults to the empty string.

Elements
--------

Each dialog supports various elements for users to enter information. Each element is required by default. To make an element optional, set the field ``"optional": true``.

.. image:: ../images/interactive-dialog-error.png
   :alt: Example of an error message in an interactive dialog.

Text elements
~~~~~~~~~~~~~

Text elements are single-line plain text fields. Use this for inputs such as names, email addresses, or phone numbers.

.. image:: ../images/interactive-dialog-text.png
   :alt: Example of a text element in an interactive dialog.

.. code-block:: json

    {
        "display_name": "Email",
        "name": "email",
        "type": "text",
        "subtype": "email",
        "placeholder": "placeholder@example.com"
    }

Supported fields for text elements:

.. list-table::
   :widths: 20 15 65
   :header-rows: 1

   * - Field
     - Type
     - Description
   * - ``display_name``
     - String
     - Display name of the field. Maximum 24 characters.
   * - ``name``
     - String
     - Name of the field element. Maximum 300 characters. Use unique ``name`` fields in the same dialog.
   * - ``type``
     - String
     - Set this value to ``text``.
   * - ``subtype``
     - String
     - (Optional) One of ``text``, ``email``, ``number``, ``password``, ``tel``, or ``url``. Sets the keyboard layout on mobile. Defaults to ``text``.
   * - ``min_length``
     - Integer
     - (Optional) Minimum input length. Defaults to 0.
   * - ``max_length``
     - Integer
     - (Optional) Maximum input length. Defaults to 150. For longer inputs, consider a ``textarea``.
   * - ``optional``
     - Boolean
     - (Optional) Set to ``true`` if not required. Defaults to ``false``.
   * - ``help_text``
     - String
     - (Optional) Help text for the element. Maximum 150 characters.
   * - ``default``
     - String
     - (Optional) A default value for the element. Maximum 150 characters.
   * - ``placeholder``
     - String
     - (Optional) Placeholder text. Maximum 150 characters.

Textarea elements
~~~~~~~~~~~~~~~~~

Textarea elements are multi-line plain text fields, for inputs longer than 150 characters.

.. code-block:: json

    {
        "display_name": "Ticket Description",
        "name": "ticket_description",
        "type": "textarea",
        "help_text": "Provide a description for your ticket."
    }

The maximum length for a ``textarea`` is 3,000 characters. The supported fields are the same as for the ``text`` element, but with different default ``max_length`` and character limits for ``default`` and ``placeholder``.

Select elements
~~~~~~~~~~~~~~~

Select elements are menus that allow users to select one option from a predefined list.

.. image:: ../images/interactive-dialog-select.png
   :alt: Example of a select element in an interactive dialog.

.. image:: ../images/interactive-dialog-select-menu.png
   :alt: Example of an expanded select element menu.

.. code-block:: json

    {
        "display_name": "Option Selector",
        "name": "options",
        "type": "select",
        "options": [
             {
                 "text": "Option1",
                 "value": "opt1"
             },
             {
                 "text": "Option2",
                 "value": "opt2"
             },
             {
                 "text": "Option3",
                 "value": "opt3"
             }
        ]
    }

The list can also be generated dynamically from users or public channels:

- For users: ``"data_source": "users"``
- For public channels: ``"data_source": "channels"``

Supported fields for select elements:

.. list-table::
   :widths: 20 15 65
   :header-rows: 1

   * - Field
     - Type
     - Description
   * - ``display_name``
     - String
     - Display name of the field. Maximum 24 characters.
   * - ``name``
     - String
     - Name of the field element. Maximum 300 characters.
   * - ``type``
     - String
     - Set this value to ``select``.
   * - ``data_source``
     - String
     - (Optional) One of ``users`` or ``channels``. If not specified, a manual list of ``options`` is assumed.
   * - ``optional``
     - Boolean
     - (Optional) Set to ``true`` if not required. Defaults to ``false``.
   * - ``options``
     - Array
     - (Optional) An array of options. Not applicable for ``users`` or ``channels`` data sources.
   * - ``help_text``
     - String
     - (Optional) Help text for the element. Maximum 150 characters.
   * - ``default``
     - String
     - (Optional) A default value for the element. Maximum 3,000 characters.
   * - ``placeholder``
     - String
     - (Optional) Placeholder text. Maximum 3,000 characters.

Checkbox elements
~~~~~~~~~~~~~~~~~

Available from Mattermost v5.16, checkbox elements are used for binary selections.

.. image:: ../images/interactive-dialog-bool.png
   :alt: Example of a checkbox element.

.. code-block:: json

    {
        "display_name": "Can you please select below",
        "placeholder": "The meeting was helpful.",
        "name": "meeting_input",
        "type": "bool"
    }

Supported fields for checkbox elements:

.. list-table::
   :widths: 20 15 65
   :header-rows: 1

   * - Field
     - Type
     - Description
   * - ``display_name``
     - String
     - Display name of the field. Maximum 24 characters.
   * - ``name``
     - String
     - Name of the field element. Maximum 300 characters.
   * - ``type``
     - String
     - Set this value to ``bool``.
   * - ``optional``
     - Boolean
     - (Optional) Set to ``true`` if not required. Defaults to ``false``.
   * - ``help_text``
     - String
     - (Optional) Help text for the element. Maximum 150 characters.
   * - ``default``
     - String
     - (Optional) Set a default value (``true`` or ``false``).
   * - ``placeholder``
     - String
     - (Optional) A label displayed next to the checkbox. Maximum 150 characters.

Radio elements
~~~~~~~~~~~~~~

Available from Mattermost v5.16, radio elements allow users to select one option from a list of choices.

.. image:: ../images/interactive-dialog-radio.png
   :alt: Example of a radio button element.

.. code-block:: json

    {
        "display_name": "Which department do you work in?",
        "name": "department",
        "type": "radio",
        "options": [
            {
                "text": "Engineering",
                "value": "engineering"
            },
            {
                "text": "Sales",
                "value": "sales"
            },
            {
                "text": "Administration",
                "value": "administration"
            }
        ],
        "help_text": "Please indicate your department as of January 1.",
        "default": "engineering"
    }

Supported fields for radio elements:

.. list-table::
   :widths: 20 15 65
   :header-rows: 1

   * - Field
     - Type
     - Description
   * - ``display_name``
     - String
     - Display name of the field. Maximum 24 characters.
   * - ``name``
     - String
     - Name of the field element. Maximum 300 characters.
   * - ``type``
     - String
     - Set this value to ``radio``.
   * - ``options``
     - Array
     - An array of options for the radio element.
   * - ``help_text``
     - String
     - (Optional) Help text for the element. Maximum 150 characters.
   * - ``default``
     - String
     - (Optional) Set a default value.

Dialog submission
-----------------

When a user submits a dialog, Mattermost performs client-side validation for required fields and correct formats. The submission payload sent to the integration's specified URL is:

.. code-block:: json

    {
        "type": "dialog_submission",
        "callback_id": "<callback ID provided by the integration>",
        "state": "<state provided by the integration>",
        "user_id": "<user ID of the user who submitted the dialog>",
        "channel_id": "<channel ID the user was in when submitting the dialog>",
        "team_id": "<team ID the user was on when submitting the dialog>",
        "submission": {
            "some_element_name": "<value of that element>",
            "some_other_element": "<value of some other element>"
        },
        "cancelled": false
    }

If ``notify_on_cancel`` is set to ``true`` and the user cancels the dialog, the ``cancelled`` field will be ``true`` and ``submission`` will be empty.

Your integration can also perform server-side validation by responding to the submission with a JSON object containing an ``errors`` field. This object maps input field names to error messages.

.. code-block:: json

    {"errors": {"num_between_0_and_10": "Enter a number between 0 and 10."}}

For a generic error not tied to a specific field (available in Mattermost v5.18+), respond with an ``error`` field:

.. code-block:: json

    {"error": "Failed to fetch additional data. Please try again."}

After a successful submission, we recommend the integration posts a confirmation message (e.g., an ephemeral message) back to Mattermost.

.. note::
   If the dialog is closed by clicking **Cancel** or the **X**, no data is submitted. Clicking outside the dialog will not close it, to prevent accidental loss of input.

Example
-------

Below is a full example of a JSON payload that creates an interactive dialog:

.. image:: ../images/interactive-dialog-complete-example.png
   :alt: Example of a complete interactive dialog.

.. code-block:: json
   :linenos:

    {
      "trigger_id":"nbt1dxzqwpn6by14sfs66ganhc",
      "url":"http://localhost:5000/dialog_submit",
      "dialog":{
        "callback_id":"somecallbackid",
        "title":"Test Title",
        "icon_url":"https://mattermost.com/wp-content/uploads/2022/02/icon.png",
        "elements":[
           {
              "display_name":"Display Name",
              "name":"realname",
              "type":"text",
              "subtype":"",
              "default":"default text",
              "placeholder":"placeholder",
              "help_text":"This a regular input in an interactive dialog triggered by a test integration.",
              "optional":false,
              "min_length":0,
              "max_length":0,
              "data_source":"",
              "options":null
           },
           {
              "display_name":"Email",
              "name":"someemail",
              "type":"text",
              "subtype":"email",
              "default":"",
              "placeholder":"placeholder@bladekick.com",
              "help_text":"This a regular email input in an interactive dialog triggered by a test integration.",
              "optional":false,
              "min_length":0,
              "max_length":0,
              "data_source":"",
              "options":null
           },
           {
              "display_name":"User Selector",
              "name":"someuserselector",
              "type":"select",
              "subtype":"",
              "default":"",
              "placeholder":"Select a user...",
              "help_text":"",
              "optional":false,
              "min_length":0,
              "max_length":0,
              "data_source":"users",
              "options":null
           }
        ],
        "submit_label":"Submit",
        "notify_on_cancel":true,
        "state":"somestate"
      }
    }

Share your integration
----------------------

If you've built an integration for Mattermost, please consider sharing your work in our `app directory <https://mattermost.com/marketplace/>`_. The app directory lists open source integrations developed by the Mattermost community.

Slack compatibility
-------------------

The schema for Mattermost dialogs is similar to Slack's, with a few differences:
- ``url``: Must be specified in Mattermost.
- ``icon_url``: An optional field in Mattermost.
- ``display_name``: Used in Mattermost instead of Slack's ``label``.
- ``help_text``: Used in Mattermost instead of Slack's ``hint``.
- ``default``: Used in Mattermost instead of Slack's ``value``.
